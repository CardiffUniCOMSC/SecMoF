<?xml version="1.0" encoding="UTF-8"?>
<description:Group xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:description="http://www.eclipse.org/sirius/description/1.1.0" xmlns:description_1="http://www.eclipse.org/sirius/diagram/description/1.1.0" xmlns:description_2="http://www.eclipse.org/sirius/table/description/1.1.0" xmlns:properties="http://www.eclipse.org/sirius/properties/1.0.0" xmlns:style="http://www.eclipse.org/sirius/diagram/description/style/1.1.0" xmlns:tool="http://www.eclipse.org/sirius/diagram/description/tool/1.1.0" xmlns:tool_1="http://www.eclipse.org/sirius/description/tool/1.1.0" xmlns:validation="http://www.eclipse.org/sirius/description/validation/1.1.0" name="FRIPP" version="12.0.0.2017041100">
  <ownedViewpoints name="FRIPPviewpoint" label="FRIPP Viewpoint">
    <ownedRepresentations xsi:type="description_1:DiagramDescription" name="ArtifactLife diagram" titleExpression="aql: self.name + ' Artifact-Life Diagram'" domainClass="PROVE::Artifact" rootExpression="aql: self" enablePopupBars="true">
      <metamodel href="dsm.PROVE#/"/>
      <metamodel href="http://www.example.org/dependencyModel#/"/>
      <layout xsi:type="description_1:CustomLayoutConfiguration" id="org.eclipse.elk.layered" label="ELK Layered" description="Layer-based algorithm provided by the Eclipse Layout Kernel. Arranges as many edges as possible into one direction by placing nodes into subsequent layers. This implementation supports different routing styles (straight, orthogonal, splines); if orthogonal routing is selected, arbitrary port constraints are respected, thus enabling the layout of block diagrams such as actor-oriented models or circuit schematics. Furthermore, full layout of compound graphs with cross-hierarchy edges is supported when the respective option is activated on the top level.">
        <layoutOptions xsi:type="description_1:EnumLayoutOption" id="org.eclipse.elk.layered.nodePlacement.bk.edgeStraightening">
          <targets>PARENT</targets>
          <value name="NONE"/>
        </layoutOptions>
        <layoutOptions xsi:type="description_1:EnumLayoutOption" id="org.eclipse.elk.direction">
          <targets>PARENT</targets>
          <value name="DOWN"/>
        </layoutOptions>
        <layoutOptions xsi:type="description_1:EnumLayoutOption" id="org.eclipse.elk.edgeRouting">
          <targets>PARENT</targets>
          <value name="ORTHOGONAL"/>
        </layoutOptions>
        <layoutOptions xsi:type="description_1:BooleanLayoutOption" id="org.eclipse.elk.layered.nodePlacement.favorStraightEdges" value="true">
          <targets>PARENT</targets>
        </layoutOptions>
        <layoutOptions xsi:type="description_1:EnumSetLayoutOption" id="org.eclipse.elk.nodeSize.constraints">
          <targets>NODE</targets>
          <values name="PORTS"/>
          <values name="PORT_LABELS"/>
          <values name="NODE_LABELS"/>
        </layoutOptions>
      </layout>
      <defaultLayer name="Default">
        <nodeMappings name="ArtifactStates" semanticCandidatesExpression="aql: self.eContents()" domainClass="PROVE::ArtifactState">
          <style xsi:type="style:EllipseNodeDescription" labelSize="12" sizeComputationExpression="10" labelPosition="node" resizeKind="NSEW">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
          </style>
        </nodeMappings>
        <edgeMappings name="stateTransitions" preconditionExpression="aql: source.eContents(PROVE::ArtifactStateInstance).usedByActivity.eContainer()->excludes(self.originatingActivity)" semanticCandidatesExpression="aql: self.eAllContents(PROVE::ArtifactStateInstance)->reject(instance | instance.originatingActivity = instance.usedByActivity.eContainer())" documentation="source find expression: aql: self.eContainer().eContainer().eAllContents(PROVE::ArtifactStateInstance)->select(instance | instance.usedByActivity=self.originatingActivity).eContainer()->asOrderedSet()&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;General semantic expressions:&#xD;&#xA;original: aql: self.eAllContents(PROVE::ArtifactStateInstance)->reject(instance | instance.originatingActivity = instance.usedByActivity.eContainer())&#xD;&#xA;Advanced precondition:&#xD;&#xA;aql: diagram.eAllContents().target->filter(PROVE::ArtifactStateInstance)->select(instance| instance.siblings()->includes(self))->excludes(inst | inst. self.originatingActivity)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;getting sourceNode:&#xD;&#xA;aql: self.eContents(diagram::DEdge).sourceNode&#xD;&#xA;&#xD;&#xA;Precondition expression:&#xD;&#xA;aql: diagram.eAllContents().target->filter(PROVE::ArtifactStateInstance)->select(instance| instance.siblings()->includes(self))->excludes(inst | inst. self.originatingActivity)" sourceMapping="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='ArtifactLife%20diagram']/@defaultLayer/@nodeMappings[name='ArtifactStates']" targetMapping="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='ArtifactLife%20diagram']/@defaultLayer/@nodeMappings[name='ArtifactStates']" targetFinderExpression="aql: self.eContainer()" sourceFinderExpression="aql: self.eContainer().eContainer().eAllContents(PROVE::ArtifactStateInstance)->select(instance | instance.usedByActivity=self.originatingActivity and instance.originatingActivity.eContainer()&lt;>self.originatingActivity).eContainer()->asOrderedSet()" domainClass="PROVE::ArtifactStateInstance" useDomainElement="true">
          <style sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <centerLabelStyleDescription labelSize="12" showIcon="false" labelExpression="aql: self.originatingActivity.name">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
      </defaultLayer>
      <additionalLayers name="Status" activeByDefault="true">
        <customization>
          <vsmElementCustomizations xsi:type="description:VSMElementCustomization" predicateExpression="aql: self.achievedStatus = true">
            <featureCustomizations xsi:type="description:EReferenceCustomization" appliedOn="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='ArtifactLife%20diagram']/@defaultLayer/@nodeMappings[name='ArtifactStates']/@style" referenceName="color">
              <value href="environment:/viewpoint#//@systemColors/@entries[name='green']"/>
            </featureCustomizations>
          </vsmElementCustomizations>
          <vsmElementCustomizations xsi:type="description:VSMElementCustomization" predicateExpression="aql: self.eContents()->size()==0">
            <featureCustomizations xsi:type="description:EReferenceCustomization" appliedOn="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='ArtifactLife%20diagram']/@defaultLayer/@nodeMappings[name='ArtifactStates']/@style" referenceName="color">
              <value href="environment:/viewpoint#//@systemColors/@entries[name='red']"/>
            </featureCustomizations>
          </vsmElementCustomizations>
        </customization>
      </additionalLayers>
      <additionalLayers name="REMOVE">
        <edgeMappings name="REMOVEstateTransitions" preconditionExpression="aql: diagram.eAllContents().target->filter(PROVE::ArtifactStateInstance)->select(instance| instance.siblings()->includes(self))->excludes(inst | inst. self.originatingActivity)" semanticCandidatesExpression="aql: self.eAllContents(PROVE::ArtifactStateInstance)->reject(instance | instance.originatingActivity = instance.usedByActivity.eContainer())" documentation="source find expression: aql: self.eContainer().eContainer().eAllContents(PROVE::ArtifactStateInstance)->select(instance | instance.usedByActivity=self.originatingActivity).eContainer()->asOrderedSet()&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;General semantic expressions:&#xD;&#xA;original: aql: self.eAllContents(PROVE::ArtifactStateInstance)->reject(instance | instance.originatingActivity = instance.usedByActivity.eContainer())&#xD;&#xA;Advanced precondition:&#xD;&#xA;aql: diagram.eAllContents().target->filter(PROVE::ArtifactStateInstance)->select(instance| instance.siblings()->includes(self))->excludes(inst | inst. self.originatingActivity)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;getting sourceNode:&#xD;&#xA;aql: self.eContents(diagram::DEdge).sourceNode&#xD;&#xA;&#xD;&#xA;Precondition expression:&#xD;&#xA;aql: diagram.eAllContents().target->filter(PROVE::ArtifactStateInstance)->select(instance| instance.siblings()->includes(self))->excludes(inst | inst. self.originatingActivity)" sourceMapping="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='ArtifactLife%20diagram']/@defaultLayer/@nodeMappings[name='ArtifactStates']" targetMapping="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='ArtifactLife%20diagram']/@defaultLayer/@nodeMappings[name='ArtifactStates']" targetFinderExpression="aql: self.eContainer()" sourceFinderExpression="aql: self.eContainer().eContainer().eAllContents(PROVE::ArtifactStateInstance)->select(instance | instance.usedByActivity=self.originatingActivity).eContainer()->asOrderedSet()" domainClass="PROVE::ArtifactStateInstance" useDomainElement="true">
          <style sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <centerLabelStyleDescription labelSize="12" showIcon="false" labelExpression="aql: self.originatingActivity.name">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
      </additionalLayers>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_2:CrossTableDescription" name="ActivitiesInterfaces" titleExpression="aql: self.name + ' Interface Map'" domainClass="PROVE::Process" initialHeaderColumnWidth="-1">
      <metamodel href="dsm.PROVE#/"/>
      <ownedLineMappings name="InputActivity" domainClass="PROVE::Process" semanticCandidatesExpression="aql: self->asSet()->concat(self.eContents()->select(inst |  inst.eClass()&lt;>PROVE::ShadowNodeIncoming and inst.eClass()&lt;>PROVE::ShadowNodeOutgoing))" headerLabelExpression="aql: self.name">
        <ownedSubLines name="LowerInputActivity" reusedSubLines="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='ActivitiesInterfaces']/@ownedLineMappings[name='InputActivity']/@ownedSubLines[name='LowerInputActivity']" reusedInMappings="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='ActivitiesInterfaces']/@ownedLineMappings[name='InputActivity']/@ownedSubLines[name='LowerInputActivity']" domainClass="PROVE::Process" semanticCandidatesExpression="aql: self.eContents()->select(inst | inst.eClass()&lt;>PROVE::ShadowNodeIncoming and inst.eClass()&lt;>PROVE::ShadowNodeOutgoing)" headerLabelExpression="aql: self.name"/>
      </ownedLineMappings>
      <ownedColumnMappings name="OutputActivity" headerLabelExpression="aql: self.name" domainClass="PROVE::Process" semanticCandidatesExpression="aql: self.eAllContents()->select(inst | inst.eClass()&lt;>PROVE::ShadowNodeIncoming and inst.eClass()&lt;>PROVE::ShadowNodeOutgoing)->concat(self->asSet())"/>
      <intersection name="InterfaceDefinition" lineMapping="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='ActivitiesInterfaces']/@ownedLineMappings[name='InputActivity'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='ActivitiesInterfaces']/@ownedLineMappings[name='InputActivity']/@ownedSubLines[name='LowerInputActivity']" columnMapping="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='ActivitiesInterfaces']/@ownedColumnMappings.0" labelExpression="aql: self.resultArtifactInState->select(art| art.usedByActivity=columnSemantic)->collect(art| art.eContainer().eContainer().name + '::' + art.eContainer().name)" columnFinderExpression="aql: self.resultArtifactInState.usedByActivity">
        <defaultForeground>
          <foreGroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </defaultForeground>
      </intersection>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:DiagramDescription" name="FRIPP Representation" titleExpression="aql: self.name + ' FRIPP representation'" initialisation="true" showOnStartup="true" domainClass="PROVE::Process" enablePopupBars="true">
      <metamodel href="dsm.PROVE#/"/>
      <metamodel href="http://www.example.org/dependencyModel#/"/>
      <metamodel href="http://www.example.org/FRIPP#/"/>
      <validationSet name="Design tips">
        <ownedRules xsi:type="validation:ViewValidationRule" name="crossHierarchies" level="WARNING" message="aql: 'This artifact-in-state flow is not well coordinated between hierarchies (' + self.target.eContainer(PROVE::Artifact).name + '::' + self.target.eContainer(PROVE::ArtifactState).name +' from '+ self.target.originatingActivity.name + ' to ' + self.target.usedByActivity.name +')'" targets="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@edgeMappings[name='ArtifactInStateFlow']">
          <audits auditExpression="aql: (self.target.usedByActivity.eContainer(PROVE::Process)==self.target.originatingActivity.eContainer(PROVE::Process)) or (self.target.usedByActivity. eContainer()==self.target.originatingActivity) or (self.target.originatingActivity.eContainer()==self.target.usedByActivity)"/>
        </ownedRules>
        <ownedRules xsi:type="validation:ViewValidationRule" name="noArtifactSpecified" level="ERROR" message="aql: 'This flow has no associated artifact (' + self.target.originatingActivity.name + ' to ' + self.target.usedByActivity.name + ')'" targets="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@edgeMappings[name='ArtifactInStateFlow']">
          <audits auditExpression="aql: self.target.eContainer(PROVE::Artifact).name&lt;>'undefined'"/>
        </ownedRules>
        <ownedRules xsi:type="validation:ViewValidationRule" name="noStateSpecified" message="aql: 'The artifact in this flow has no specified state (' + self.target.eContainer(PROVE::Artifact).name + ' from ' + self.target.originatingActivity.name + ' to ' + self.target.usedByActivity.name + ')'" targets="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@edgeMappings[name='ArtifactInStateFlow']">
          <audits auditExpression="aql: self.target.eContainer(PROVE::ArtifactState).name&lt;>'undefined'"/>
        </ownedRules>
        <ownedRules xsi:type="validation:ViewValidationRule" name="activityWithoutOutput" level="WARNING" message="aql: 'This activity has no specified output (' + self.target.name + ')'" targets="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@nodeMappings[name='Process_PD'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD']/@subContainerMappings[name='ProcessHierarchy_PD']">
          <audits auditExpression="aql: self.target.resultArtifactInState->notEmpty()"/>
        </ownedRules>
        <ownedRules xsi:type="validation:ViewValidationRule" name="inconsistentStatus" message="aql: 'This achieved artifact-in-state is the output of an activity with no achieved input (' +self.target.eContainer(PROVE::Artifact).name + '::' + self.target.eContainer(PROVE::ArtifactState).name + ' from ' + self.target.originatingActivity.name + ' )'" targets="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@edgeMappings[name='ArtifactInStateFlow']">
          <audits auditExpression="aql: self.target.eContainer(PROVE::ArtifactState).achievedStatus==false or self.target.originatingActivity.artifactInStateUsed->isEmpty() or self.target.originatingActivity.artifactInStateUsed->select(flow|flow.eContainer(PROVE::ArtifactState).achievedStatus==true)->notEmpty()"/>
        </ownedRules>
      </validationSet>
      <layout xsi:type="description_1:CustomLayoutConfiguration" id="org.eclipse.elk.layered" label="ELK Layered" description="Layer-based algorithm provided by the Eclipse Layout Kernel. Arranges as many edges as possible into one direction by placing nodes into subsequent layers. This implementation supports different routing styles (straight, orthogonal, splines); if orthogonal routing is selected, arbitrary port constraints are respected, thus enabling the layout of block diagrams such as actor-oriented models or circuit schematics. Furthermore, full layout of compound graphs with cross-hierarchy edges is supported when the respective option is activated on the top level."/>
      <defaultLayer name="Default">
        <nodeMappings name="Process_PD" preconditionExpression="aql: self->notEmpty()=false" semanticCandidatesExpression="aql: self" synchronizationLock="true" domainClass="PROVE::Process" dropDescriptions="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@toolSections.0/@ownedTools[name='ReconnectFlowDestination'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@toolSections.0/@ownedTools[name='ReconnectFlowSource'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@toolSections.0/@ownedTools[name='MoveActivity']">
          <style xsi:type="style:SquareDescription" labelSize="14" tooltipExpression="PROVE Activity" sizeComputationExpression="10" labelPosition="node" resizeKind="NSEW" width="20" height="20">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelFormat>italic</labelFormat>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
        </nodeMappings>
        <edgeMappings name="ArtifactInStateFlow" labelDirectEdit="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@toolSections.0/@ownedTools[name='ChangeArtifactDetails']" doubleClickDescription="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@additionalLayers[name='Status']/@toolSections.0/@ownedTools[name='dblclkActivityState']" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD']/@borderedNodeMappings[name='ArtifactSourcePort'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@borderedNodeMappings[name='ScopeSourcePort']" targetMapping="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD']/@borderedNodeMappings[name='ArtifactDestinationPort'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@borderedNodeMappings[name='ScopeDestinationPort']" targetFinderExpression="aql: self" sourceFinderExpression="aql: self" domainClass="PROVE::ArtifactStateInstance" useDomainElement="true">
          <style sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription labelSize="12" showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings name="ProcessTopHierarchy_PD" labelDirectEdit="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@toolSections.0/@ownedTools[name='ChangeName']" semanticCandidatesExpression="aql: self" synchronizationLock="true" domainClass="PROVE::Process" dropDescriptions="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@toolSections.0/@ownedTools[name='ReconnectFlowDestination'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@toolSections.0/@ownedTools[name='ReconnectFlowSource'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@toolSections.0/@ownedTools[name='MoveActivity']">
          <borderedNodeMappings name="ScopeSourcePort" preconditionExpression="aql: container->concat(container.eAllContents(PROVE::Process))->excludes(self.originatingActivity)" semanticCandidatesExpression="aql: self->concat(self.eAllContents()).eInverse(PROVE::ArtifactStateInstance)" domainClass="PROVE::ArtifactStateInstance">
            <style xsi:type="style:DotDescription" labelSize="12" showIcon="false" labelExpression="" tooltipExpression="aql: 'external source'" sizeComputationExpression="1" labelPosition="node" strokeSizeComputationExpression="1">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
          </borderedNodeMappings>
          <borderedNodeMappings name="ScopeDestinationPort" preconditionExpression="aql: container->concat(container.eAllContents(PROVE::Process))->excludes(self.usedByActivity)" semanticCandidatesExpression="aql: self->concat(self.eAllContents()).eInverse(PROVE::ArtifactStateInstance)" domainClass="PROVE::ArtifactStateInstance">
            <style xsi:type="style:DotDescription" labelSize="12" showIcon="false" labelExpression="" tooltipExpression="aql: 'external destination'" sizeComputationExpression="1" labelPosition="node" strokeSizeComputationExpression="1">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
          </borderedNodeMappings>
          <subContainerMappings name="ProcessContainer_PD" labelDirectEdit="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@toolSections.0/@ownedTools[name='ChangeName']" semanticCandidatesExpression="aql: self" domainClass="PROVE::Process" dropDescriptions="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@toolSections.0/@ownedTools[name='ReconnectFlowDestination'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@toolSections.0/@ownedTools[name='ReconnectFlowSource'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@toolSections.0/@ownedTools[name='MoveActivity']">
            <borderedNodeMappings name="ArtifactSourcePort" preconditionExpression="aql: self.originatingActivity=container" semanticCandidatesExpression="aql: self.eInverse(PROVE::ArtifactStateInstance)" domainClass="PROVE::ArtifactStateInstance">
              <style xsi:type="style:DotDescription" labelSize="12" showIcon="false" labelExpression="" tooltipExpression="aql: 'deliverable/source'" sizeComputationExpression="1" labelPosition="node" strokeSizeComputationExpression="1">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              </style>
            </borderedNodeMappings>
            <borderedNodeMappings name="ArtifactDestinationPort" preconditionExpression="aql: self.usedByActivity=container" semanticCandidatesExpression="aql: self.eInverse(PROVE::ArtifactStateInstance)" domainClass="PROVE::ArtifactStateInstance">
              <style xsi:type="style:DotDescription" labelSize="12" showIcon="false" labelExpression="" tooltipExpression="aql: 'prerequisite/destination'" sizeComputationExpression="1" labelPosition="node" strokeSizeComputationExpression="1">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              </style>
            </borderedNodeMappings>
            <subContainerMappings name="ProcessHierarchy_PD" preconditionExpression="aql: self->notEmpty()=true and self.oclIsKindOf(PROVE::Process)" deletionDescription="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@toolSections.0/@ownedTools[name='DeleteActivity']" labelDirectEdit="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@toolSections.0/@ownedTools[name='ChangeName']" semanticCandidatesExpression="aql: self.process" doubleClickDescription="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@toolSections.0/@ownedTools[name='dblclkActivityProcess']" domainClass="PROVE::Process" reusedBorderedNodeMappings="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD']/@borderedNodeMappings[name='ArtifactDestinationPort'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD']/@borderedNodeMappings[name='ArtifactSourcePort']" dropDescriptions="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@toolSections.0/@ownedTools[name='ReconnectFlowDestination'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@toolSections.0/@ownedTools[name='ReconnectFlowSource'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@toolSections.0/@ownedTools[name='MoveActivity']">
              <style xsi:type="style:WorkspaceImageDescription" borderSizeComputationExpression="2" labelSize="12" showIcon="false" labelExpression="aql: self.name + '[' + self.resourceUsed->filter(FRIPP::Actuator).name->sep('+') + '] '" tooltipExpression="aql: 'Start: ' + self.startDate + '\n' + 'End: ' + self.endDate + '\n' + 'Resources: ' + self.resourceUsed.name->sep(' + ')">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </subContainerMappings>
            <style xsi:type="style:WorkspaceImageDescription" borderSizeComputationExpression="2" labelSize="12" showIcon="false" labelExpression="aql: self.name + '[' + self.resourceUsed->filter(FRIPP::Actuator).name->sep('+') + '] '" tooltipExpression="aql: 'Start: ' + self.startDate + '\n' + 'End: ' + self.endDate + '\n' + 'Resources: ' + self.resourceUsed.name->sep(' + ')">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </subContainerMappings>
          <style xsi:type="style:WorkspaceImageDescription" borderSizeComputationExpression="3" labelSize="12" showIcon="false" labelExpression="aql: self.name + ' scope'" roundedCorner="true">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
            <labelFormat>italic</labelFormat>
            <labelFormat>underline</labelFormat>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
          </style>
        </containerMappings>
        <containerMappings name="RefContainer" semanticCandidatesExpression="aql: self" domainClass="FRIPP::PlaybookProcess" childrenPresentation="List">
          <subNodeMappings name="ReferenceItem" semanticCandidatesExpression="aql: self.relatedreferences" domainClass="FRIPP::ExternalReference">
            <style xsi:type="style:SquareDescription" labelSize="12" labelPosition="node" resizeKind="NSEW">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
          </subNodeMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelSize="12" showIcon="false" labelExpression="aql: 'Related references:'">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelFormat>bold</labelFormat>
            <labelFormat>italic</labelFormat>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
          </style>
        </containerMappings>
        <toolSections name="FRIPPtools" label="FRIPP Toolbox">
          <ownedTools xsi:type="tool:NodeCreationDescription" name="Activity" nodeMappings="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@nodeMappings[name='Process_PD']" iconPath="dsm.PROVE.edit\icons\full\obj16\ActivityAdd.gif" extraMappings="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD']/@subContainerMappings[name='ProcessHierarchy_PD'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="FRIPP::PlaybookProcess" referenceName="process" variableName="instanceProcess">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self"/>
                </subModelOperations>
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Activity Creation">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Default Page" semanticCandidateExpression="var:self" groups="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@toolSections.0/@ownedTools[name='Activity']/@initialOperation/@firstModelOperations/@subModelOperations.1/@groups.0"/>
                  <groups name="Default Group" semanticCandidateExpression="var:self">
                    <controls xsi:type="properties:TextDescription" name="name" labelExpression="Activity name:" valueExpression="aql:instance.name">
                      <initialOperation>
                        <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:instanceProcess">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:newValue"/>
                        </firstModelOperations>
                      </initialOperation>
                    </controls>
                  </groups>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" name="ArtifactInState" label="Artifact in State" iconPath="dsm.PROVE.edit\icons\full\obj16\ArtifactAddSmall.png" extraSourceMappings="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD']/@subContainerMappings[name='ProcessHierarchy_PD']" extraTargetMappings="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD']/@subContainerMappings[name='ProcessHierarchy_PD']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source.ancestors()->last()">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Artifact in State Creation">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation>
                      <firstModelOperations xsi:type="tool_1:Let" variableName="newArtifactNameExists" valueExpression="aql: newArtifactName">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql: newArtifactNameExists==null">
                          <subModelOperations xsi:type="tool_1:Let" variableName="newArtifactName" valueExpression="aql: 'undefined'"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:Let" variableName="foundArtifact" valueExpression="aql: source.ancestors()->last().eAllContents(PROVE::Artifact)->select(artifact | artifact.name == newArtifactName)->last()">
                          <subModelOperations xsi:type="tool_1:Let" variableName="foundArtifactByNameFailed" valueExpression="aql: foundArtifact->isEmpty()">
                            <subModelOperations xsi:type="tool_1:If" conditionExpression="aql: foundArtifactByNameFailed==true">
                              <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql: source.ancestors()->last()">
                                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PROVE::Artifact" referenceName="artifact" variableName="foundArtifact">
                                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:foundArtifact">
                                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql: newArtifactName"/>
                                  </subModelOperations>
                                </subModelOperations>
                              </subModelOperations>
                            </subModelOperations>
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:foundArtifact">
                              <subModelOperations xsi:type="tool_1:Let" variableName="artifactStateExists" valueExpression="aql: newStateName">
                                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql: artifactStateExists==null">
                                  <subModelOperations xsi:type="tool_1:Let" variableName="newStateName" valueExpression="aql: 'undefined'"/>
                                </subModelOperations>
                              </subModelOperations>
                              <subModelOperations xsi:type="tool_1:Let" variableName="foundState" valueExpression="aql: foundArtifact.eContents(PROVE::ArtifactState)->select(artifactState | artifactState.name = newStateName)->last()">
                                <subModelOperations xsi:type="tool_1:Let" variableName="foundStateFailed" valueExpression="aql: foundState->isEmpty()">
                                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql: foundStateFailed==true">
                                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PROVE::ArtifactState" referenceName="state" variableName="foundState">
                                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql: newStateName=='' or newStateName==' ' or newStateName==null">
                                        <subModelOperations xsi:type="tool_1:Let" variableName="newStateName" valueExpression="aql: 'undefined'"/>
                                      </subModelOperations>
                                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="var:newStateName"/>
                                      <subModelOperations xsi:type="tool_1:SetValue" featureName="artifactName" valueExpression="var:newArtifactName"/>
                                    </subModelOperations>
                                  </subModelOperations>
                                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql: foundState">
                                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PROVE::ArtifactStateInstance" referenceName="artifactstateinstance">
                                      <subModelOperations xsi:type="tool_1:SetValue" featureName="usedByActivity" valueExpression="var:target"/>
                                      <subModelOperations xsi:type="tool_1:SetValue" featureName="originatingActivity" valueExpression="aql: source"/>
                                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql: foundState"/>
                                    </subModelOperations>
                                  </subModelOperations>
                                </subModelOperations>
                              </subModelOperations>
                            </subModelOperations>
                          </subModelOperations>
                        </subModelOperations>
                      </firstModelOperations>
                    </initialOperation>
                  </buttons>
                  <page name="ArtifactCreationPage" semanticCandidateExpression="var:self" groups="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@toolSections.0/@ownedTools[name='ArtifactInState']/@initialOperation/@firstModelOperations/@subModelOperations.0/@groups.0"/>
                  <groups name="ArtifactCreationGroup" semanticCandidateExpression="var:self">
                    <controls xsi:type="properties:ContainerDescription" name="ArtifactSelectionContainer">
                      <controls xsi:type="properties:TextDescription" name="ArtifactNameForFlow" labelExpression="aql: 'Enter a new artifact name:'">
                        <initialOperation>
                          <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
                            <subModelOperations xsi:type="tool_1:Let" variableName="newArtifactName" valueExpression="aql:newValue"/>
                          </firstModelOperations>
                        </initialOperation>
                      </controls>
                      <controls xsi:type="properties:SelectDescription" name="SelectArtifactNameForFlow" labelExpression="or select from existing artifacts:" valueExpression="aql: newArtifact" candidatesExpression="aql: self.eAllContents(PROVE::Artifact)" candidateDisplayExpression="aql: candidate.name.toString()">
                        <initialOperation>
                          <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
                            <subModelOperations xsi:type="tool_1:Let" variableName="newArtifact" valueExpression="aql: newValue"/>
                            <subModelOperations xsi:type="tool_1:Let" variableName="newArtifactName" valueExpression="aql: newArtifact.name"/>
                          </firstModelOperations>
                        </initialOperation>
                      </controls>
                    </controls>
                    <controls xsi:type="properties:ContainerDescription" name="ArtifactStateSelectionContainer">
                      <controls xsi:type="properties:TextDescription" name="StateNameForFlow" labelExpression="Enter desired state:" valueExpression="aql:''">
                        <initialOperation>
                          <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
                            <subModelOperations xsi:type="tool_1:Let" variableName="newStateName" valueExpression="aql:newValue"/>
                          </firstModelOperations>
                        </initialOperation>
                      </controls>
                      <controls xsi:type="properties:SelectDescription" name="SelectStateForFlow" labelExpression="or select from existing states:" valueExpression="aql: newArtifactState" candidatesExpression="aql: newArtifact.eContents(PROVE::ArtifactState)" candidateDisplayExpression="aql: candidate.name">
                        <initialOperation>
                          <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
                            <subModelOperations xsi:type="tool_1:Let" variableName="newArtifactState" valueExpression="aql: newValue"/>
                            <subModelOperations xsi:type="tool_1:Let" variableName="newStateName" valueExpression="aql: newArtifactState.name"/>
                          </firstModelOperations>
                        </initialOperation>
                      </controls>
                    </controls>
                  </groups>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DoubleClickDescription" name="dblclkActivityProcess" mappings="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD']/@subContainerMappings[name='ProcessHierarchy_PD']">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool:Navigation" createIfNotExistent="true" diagramDescription="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="ChangeName">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql: arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="ChangeArtifactDetails">
            <mask mask="{0}::{1}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql: self.eContainer(PROVE::ArtifactState)">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql: arg1"/>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql: self.eContainer(PROVE::Artifact)">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql: arg0"/>
                  <subModelOperations xsi:type="tool_1:For" expression="aql: self.eContents(PROVE::ArtifactState)">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="artifactName" valueExpression="aql: arg0"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="DeleteActivity">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:Let" valueExpression="aql: element">
                <subModelOperations xsi:type="tool_1:For" expression="aql: element.artifactInStateUsed">
                  <subModelOperations xsi:type="tool_1:RemoveElement"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:For" expression="aql: element.resultArtifactInState">
                  <subModelOperations xsi:type="tool_1:RemoveElement"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:RemoveElement"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="ReconnectFlowDestination" mappings="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD']/@borderedNodeMappings[name='ArtifactDestinationPort']" dragSource="BOTH">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql: element">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="usedByActivity" valueExpression="aql: newSemanticContainer"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="ReconnectFlowSource" mappings="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD']/@borderedNodeMappings[name='ArtifactSourcePort']" dragSource="BOTH">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql: element">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="originatingActivity" valueExpression="aql: newSemanticContainer"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="MoveActivity" mappings="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@nodeMappings[name='Process_PD'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD']/@subContainerMappings[name='ProcessHierarchy_PD']">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql: element">
                <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql: newSemanticContainer" featureName="process"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="Associate Reference" nodeMappings="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@nodeMappings[name='Process_PD']" iconPath="/FRIPP.design/icons/reference16.png" extraMappings="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD']/@subContainerMappings[name='ProcessHierarchy_PD']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Associate reference with activity">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation>
                      <firstModelOperations xsi:type="tool_1:Let" variableName="newReferenceNameExists" valueExpression="aql: newReferenceName">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql: newReferenceNameExists==null">
                          <subModelOperations xsi:type="tool_1:Let" variableName="newReferenceName" valueExpression="aql: 'undefined'"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:Let" variableName="foundReference" valueExpression="aql: container.ancestors()->first().eAllContents(FRIPP::ExternalReference)->select(ref | ref.name == newReferenceName)->last()">
                          <subModelOperations xsi:type="tool_1:Let" variableName="foundReferenceByNameFailed" valueExpression="aql: foundReference->isEmpty()">
                            <subModelOperations xsi:type="tool_1:If" conditionExpression="aql: foundReferenceByNameFailed==true">
                              <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql: container.ancestors(FRIPP::PlaybookProcess)->first()">
                                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="FRIPP::ExternalReference" referenceName="externalreferences" variableName="foundReference">
                                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:foundReference">
                                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql: newReferenceName"/>
                                  </subModelOperations>
                                </subModelOperations>
                              </subModelOperations>
                            </subModelOperations>
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql: container">
                              <subModelOperations xsi:type="tool_1:SetValue" featureName="relatedreferences" valueExpression="aql: foundReference"/>
                            </subModelOperations>
                          </subModelOperations>
                        </subModelOperations>
                      </firstModelOperations>
                    </initialOperation>
                  </buttons>
                  <page name="ReferenceAssociationPage" semanticCandidateExpression="var:self" groups="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@toolSections.0/@ownedTools[name='Associate%20Reference']/@initialOperation/@firstModelOperations/@subModelOperations.0/@groups.0"/>
                  <groups name="ReferenceAssociationGroup" semanticCandidateExpression="var:self">
                    <controls xsi:type="properties:ContainerDescription" name="ReferenceSelectionContainer">
                      <controls xsi:type="properties:TextDescription" name="Reference Name" labelExpression="aql: 'Enter a new reference:'">
                        <initialOperation>
                          <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
                            <subModelOperations xsi:type="tool_1:Let" variableName="newReferenceName" valueExpression="aql:newValue"/>
                          </firstModelOperations>
                        </initialOperation>
                      </controls>
                      <controls xsi:type="properties:SelectDescription" name="SelectReference" labelExpression="or select from existing references:" valueExpression="aql: newReference" candidatesExpression="aql: self.ancestors()->first().eAllContents(FRIPP::ExternalReference)" candidateDisplayExpression="aql: candidate.name.toString()">
                        <initialOperation>
                          <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
                            <subModelOperations xsi:type="tool_1:Let" variableName="newReference" valueExpression="aql: newValue"/>
                            <subModelOperations xsi:type="tool_1:Let" variableName="newReferenceName" valueExpression="aql: newReference.name"/>
                          </firstModelOperations>
                        </initialOperation>
                      </controls>
                    </controls>
                  </groups>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="Assign Actuator" nodeMappings="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@nodeMappings[name='Process_PD']" iconPath="/FRIPP.design/icons/resource16.png" extraMappings="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD']/@subContainerMappings[name='ProcessHierarchy_PD']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Assign actuator to activity">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation>
                      <firstModelOperations xsi:type="tool_1:Let" variableName="newActuatorNameExists" valueExpression="aql: newActuatorName">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql: newActuatorNameExists==null">
                          <subModelOperations xsi:type="tool_1:Let" variableName="newActuatorName" valueExpression="aql: 'undefined'"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:Let" variableName="foundActuator" valueExpression="aql: container.ancestors()->first().eAllContents(FRIPP::Actuator)->select(actuator | actuator.name == newActuatorName)->last()">
                          <subModelOperations xsi:type="tool_1:Let" variableName="foundActuatorByNameFailed" valueExpression="aql: foundActuator->isEmpty()">
                            <subModelOperations xsi:type="tool_1:If" conditionExpression="aql: foundActuatorByNameFailed==true">
                              <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql: container.ancestors()->first()">
                                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="FRIPP::Actuator" referenceName="resource" variableName="foundActuator">
                                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:foundActuator">
                                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql: newActuatorName"/>
                                  </subModelOperations>
                                </subModelOperations>
                              </subModelOperations>
                            </subModelOperations>
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql: container">
                              <subModelOperations xsi:type="tool_1:SetValue" featureName="resourceUsed" valueExpression="aql: foundActuator"/>
                            </subModelOperations>
                          </subModelOperations>
                        </subModelOperations>
                      </firstModelOperations>
                    </initialOperation>
                  </buttons>
                  <page name="ActuatorCreationPage" semanticCandidateExpression="var:self" groups="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@toolSections.0/@ownedTools[name='Assign%20Actuator']/@initialOperation/@firstModelOperations/@subModelOperations.0/@groups.0"/>
                  <groups name="ActuatorCreationGroup" semanticCandidateExpression="var:self">
                    <controls xsi:type="properties:ContainerDescription" name="ActutatorSelectionContainer">
                      <controls xsi:type="properties:TextDescription" name="ActuatorName" labelExpression="aql: 'Enter a new actuator name:'">
                        <initialOperation>
                          <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
                            <subModelOperations xsi:type="tool_1:Let" variableName="newActuatorName" valueExpression="aql:newValue"/>
                          </firstModelOperations>
                        </initialOperation>
                      </controls>
                      <controls xsi:type="properties:SelectDescription" name="SelectActutatorName" labelExpression="or select from existing actuators:" valueExpression="aql: newActuator" candidatesExpression="aql: self.ancestors()->first().eAllContents(FRIPP::Actuator)" candidateDisplayExpression="aql: candidate.name.toString()">
                        <initialOperation>
                          <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
                            <subModelOperations xsi:type="tool_1:Let" variableName="newActuator" valueExpression="aql: newValue"/>
                            <subModelOperations xsi:type="tool_1:Let" variableName="newActuatorName" valueExpression="aql: newActuator.name"/>
                          </firstModelOperations>
                        </initialOperation>
                      </controls>
                    </controls>
                  </groups>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" name="MarkAsCompleted" label="Mark as successful" iconPath="/FRIPP.design/icons/checkmark16.png" extraMappings="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@nodeMappings[name='Process_PD'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD']/@subContainerMappings[name='ProcessHierarchy_PD']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:Let" variableName="chosenElement" valueExpression="aql: container">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql: chosenElement">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="status" valueExpression="aql: PROVE::STATUS_ENUM::COMPLETED"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:For" expression="aql: self.eContents(FRIPP::ActivityImpact)" iteratorName="activityImpact">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql: activityImpact">
                    <subModelOperations xsi:type="tool_1:Let" variableName="newValue" valueExpression="aql: self.newValue">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="originalType" valueExpression="aql: self.paragon.Type"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="originalProbability" valueExpression="aql: self.paragon.probability"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql: self.paragon">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="Type" valueExpression="aql: dependencyModel::PARAGON_COMPOSITION_ENUM::UNCONTROLLABLE">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="probability" valueExpression="aql: newValue"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" name="RevertCompletion" label="Revert Completion" iconPath="/FRIPP.design/icons/revert16.png" extraMappings="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@nodeMappings[name='Process_PD'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD']/@subContainerMappings[name='ProcessHierarchy_PD']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:Let" variableName="chosenElement" valueExpression="aql: container">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql: chosenElement">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="status" valueExpression="aql: PROVE::STATUS_ENUM::UNSPECIFIED"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:For" expression="aql: self.eContents(FRIPP::ActivityImpact)" iteratorName="activityImpact">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql: activityImpact">
                    <subModelOperations xsi:type="tool_1:Let" variableName="newValue" valueExpression="aql: self.newValue">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql: self.paragon">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="Type" valueExpression="aql: activityImpact.originalType">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="probability" valueExpression="aql: activityImpact.originalProbability"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </defaultLayer>
      <additionalLayers name="Status">
        <edgeMappingImports name="AchievedColor" importedMapping="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@edgeMappings[name='ArtifactInStateFlow']">
          <conditionnalStyles predicateExpression="aql: self.eContainer().achievedStatus">
            <style sizeComputationExpression="2">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_green']"/>
              <centerLabelStyleDescription labelSize="12" showIcon="false" labelExpression="aql:self.eContainer().artifactName+'::'+self.eContainer().name">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
        </edgeMappingImports>
        <toolSections name="StatusMK2">
          <ownedTools xsi:type="tool:DoubleClickDescription" name="dblclkActivityState" mappings="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@edgeMappings[name='ArtifactInStateFlow']">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql: element.eContainer()">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Change status">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation>
                      <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="element">
                        <subModelOperations xsi:type="tool_1:Let" variableName="foundArtifact" valueExpression="aql: self.ancestors()->last().eAllContents()->select(myArtifact | myArtifact.name=element.artifactName)->last()">
                          <subModelOperations xsi:type="tool_1:Let" variableName="foundArtifactStates" valueExpression="aql: foundArtifact.eAllContents()->select(myArtifactState | myArtifactState.name=element.name)">
                            <subModelOperations xsi:type="tool_1:For" expression="aql: foundArtifactStates">
                              <subModelOperations xsi:type="tool_1:SetValue" featureName="achievedStatus" valueExpression="aql: element.achievedStatus"/>
                            </subModelOperations>
                          </subModelOperations>
                        </subModelOperations>
                      </firstModelOperations>
                    </initialOperation>
                  </buttons>
                  <page name="Default Page" labelExpression="Change artifact state status" semanticCandidateExpression="var:self" groups="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@additionalLayers[name='Status']/@toolSections.0/@ownedTools[name='dblclkActivityState']/@initialOperation/@firstModelOperations/@subModelOperations.0/@groups.0"/>
                  <groups name="ArtifactStateStat" labelExpression="Artifact State">
                    <controls xsi:type="properties:TextDescription" name="Artifact name" labelExpression="Type artifact name" isEnabledExpression="aql: false" valueExpression="aql: self.artifactName">
                      <initialOperation>
                        <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
                          <subModelOperations xsi:type="tool_1:Let" variableName="artifactName" valueExpression="aql: newValue"/>
                        </firstModelOperations>
                      </initialOperation>
                    </controls>
                    <controls xsi:type="properties:TextDescription" name="Artifact state" labelExpression="Type artifact state to change" isEnabledExpression="aql: false" valueExpression="aql: self.name">
                      <initialOperation>
                        <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
                          <subModelOperations xsi:type="tool_1:Let" variableName="artifactState" valueExpression="aql: newValue"/>
                        </firstModelOperations>
                      </initialOperation>
                    </controls>
                    <controls xsi:type="properties:CheckboxDescription" name="Status" labelExpression="Achieved" valueExpression="aql: self.achievedStatus">
                      <initialOperation>
                        <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="achievedStatus" valueExpression="aql: newValue"/>
                        </firstModelOperations>
                      </initialOperation>
                    </controls>
                  </groups>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </additionalLayers>
      <additionalLayers name="Process Design Tips" label="Design Tips">
        <edgeMappingImports documentation="Shows transitions between hierarchies - red arrow&#xD;&#xA;No state definitions (undefined) - blue label&#xD;&#xA;No artifact (undefined) - red label with question mark" name="incorrectHierarchy" importedMapping="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@edgeMappings[name='ArtifactInStateFlow']">
          <conditionnalStyles predicateExpression="aql: self.eContainer(PROVE::Artifact).name=='undefined'">
            <style sizeComputationExpression="2">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <centerLabelStyleDescription labelSize="12" showIcon="false" labelExpression="aql: '?'">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='red']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql: self.eContainer(PROVE::ArtifactState).name=='undefined'">
            <style sizeComputationExpression="2">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <centerLabelStyleDescription labelSize="12" showIcon="false" labelExpression="aql: self.eContainer().artifactName+'::?'">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='blue']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql: self.usedByActivity.eContainer(PROVE::Process)&lt;>self.originatingActivity.eContainer(PROVE::Process) and self.usedByActivity. eContainer()&lt;>self.originatingActivity and self.originatingActivity.eContainer()&lt;>self.usedByActivity">
            <style sizeComputationExpression="2">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='red']"/>
              <centerLabelStyleDescription labelSize="12" showIcon="false" labelExpression="aql:self.eContainer().artifactName+'::'+self.eContainer().name">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
        </edgeMappingImports>
        <toolSections name="Representation Tools">
          <ownedTools xsi:type="tool_1:SelectionWizardDescription" name="encapsulate" candidatesExpression="aql: self.process->select(instance| instance.oclIsTypeOf(PROVE::Process))" multiple="true" message="Select elements to encapsulate in this diagram" iconPath="/PROVE.design/icons/inspectEncapSmall.png" windowTitle="Process Encapsulation">
            <element name="element"/>
            <containerView name="containerView"/>
            <container name="container"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:Let" valueExpression="aql: element->filter(PROVE::Process).encapsulateElements(diagram)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:SelectionWizardDescription" name="de-encapsulate" candidatesExpression="aql: self.process->select(instance| instance.oclIsTypeOf(PROVE::Process))" multiple="true" iconPath="/PROVE.design/icons/inspectDeEncapSmall.png" windowTitle="Cancel Process Encapsulation">
            <element name="element"/>
            <containerView name="containerView"/>
            <container name="container"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:Let" valueExpression="aql: element->filter(PROVE::Process).decapsulateElements(diagram)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" name="Show Artifact Lifecycle" precondition="aql: self.oclIsTypeOf(PROVE::ArtifactStateInstance)" iconPath="/PROVE.design/icons/ArtifactState.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainer().eContainer()">
                <subModelOperations xsi:type="tool:Navigation" createIfNotExistent="true" diagramDescription="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='ArtifactLife%20diagram']"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </additionalLayers>
      <additionalLayers name="DM Layer">
        <edgeMappings name="ParagonImpact" semanticCandidatesExpression="aql: self.eAllContents()" sourceMapping="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD']/@subContainerMappings[name='ProcessHierarchy_PD']" targetFinderExpression="aql: self.paragon" sourceFinderExpression="aql: self.eContainer()" domainClass="ActivityImpact" useDomainElement="true">
          <targetMapping xsi:type="description_1:NodeMapping" href="../../DependencyModel.design/description/DependencyModel.odesign#//@ownedViewpoints[name='DependencyModelViewpoint']/@ownedRepresentations[name='DependencyModelingDiagram']/@defaultLayer/@nodeMappings[name='ParagonNode']"/>
          <style lineStyle="dash" targetArrow="InputClosedArrow" sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription labelSize="12" showIcon="false" labelExpression="aql: '['+self.newValue+']'">
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
          <conditionnalStyles predicateExpression="aql: self.newValue &lt; self.originalProbability">
            <style lineStyle="dash" targetArrow="InputClosedArrow" sizeComputationExpression="2">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='red']"/>
              <centerLabelStyleDescription labelSize="12" showIcon="false" labelExpression="aql: '['+self.newValue+']'">
                <labelFormat>italic</labelFormat>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='red']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql: self.newValue > self.originalProbability">
            <style lineStyle="dash" targetArrow="InputClosedArrow" sizeComputationExpression="2">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_green']"/>
              <centerLabelStyleDescription labelSize="12" showIcon="false" labelExpression="aql: '['+self.newValue+']'">
                <labelFormat>italic</labelFormat>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_green']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
        </edgeMappings>
        <edgeMappingImports>
          <importedMapping xsi:type="description_1:EdgeMapping" href="../../DependencyModel.design/description/DependencyModel.odesign#//@ownedViewpoints[name='DependencyModelViewpoint']/@ownedRepresentations[name='DependencyModelingDiagram']/@defaultLayer/@edgeMappings[name='ParagonCompositionEdge']"/>
        </edgeMappingImports>
        <containerMappings name="DepModelCont" semanticCandidatesExpression="aql: self.paragon" domainClass="dependencyModel::Paragon">
          <reusedNodeMappings href="../../DependencyModel.design/description/DependencyModel.odesign#//@ownedViewpoints[name='DependencyModelViewpoint']/@ownedRepresentations[name='DependencyModelingDiagram']/@defaultLayer/@nodeMappings[name='ParagonNode']"/>
        </containerMappings>
        <toolSections name="Dependency Modelling">
          <ownedTools xsi:type="tool:EdgeCreationDescription" name="ImpactParagon" label="Impact on dependency model" edgeMappings="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@additionalLayers[name='DM%20Layer']/@edgeMappings[name='ParagonImpact']" iconPath="dsm.PROVE.edit\icons\full\obj16\ArtifactAddSmall.png" extraSourceMappings="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD']/@subContainerMappings[name='ProcessHierarchy_PD']" extraTargetMappings="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD'] //@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@defaultLayer/@containerMappings[name='ProcessTopHierarchy_PD']/@subContainerMappings[name='ProcessContainer_PD']/@subContainerMappings[name='ProcessHierarchy_PD']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Create impact on dependency model">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation>
                      <firstModelOperations xsi:type="tool_1:Let" variableName="sourceActivity" valueExpression="aql: source">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql: source">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="FRIPP::ActivityImpact" referenceName="activityimpact">
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="paragon" valueExpression="aql: target"/>
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="newValue" valueExpression="aql: newImpactValue"/>
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="originalType" valueExpression="aql: target.Type"/>
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="originalProbability" valueExpression="aql: target.probability"/>
                          </subModelOperations>
                        </subModelOperations>
                      </firstModelOperations>
                    </initialOperation>
                  </buttons>
                  <page name="ImpactCreationPage" semanticCandidateExpression="var:self" groups="//@ownedViewpoints[name='FRIPPviewpoint']/@ownedRepresentations[name='FRIPP%20Representation']/@additionalLayers[name='DM%20Layer']/@toolSections.0/@ownedTools[name='ImpactParagon']/@initialOperation/@firstModelOperations/@subModelOperations.0/@groups.0"/>
                  <groups name="ImpactCreationGroup" labelExpression="aql: 'Create impact (' + source.name + ' on ' + target.description + ')'" semanticCandidateExpression="var:self">
                    <controls xsi:type="properties:ContainerDescription" name="ImpactValueContainer">
                      <controls xsi:type="properties:TextDescription" name="ImpactValue" labelExpression="aql: 'Enter a new value for affected paragon upon successful acitivity completion:'">
                        <initialOperation>
                          <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
                            <subModelOperations xsi:type="tool_1:Let" variableName="newImpactValue" valueExpression="aql:newValue"/>
                          </firstModelOperations>
                        </initialOperation>
                      </controls>
                    </controls>
                  </groups>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </additionalLayers>
    </ownedRepresentations>
    <ownedJavaExtensions qualifiedClassName="FRIPP.design.Services"/>
  </ownedViewpoints>
  <extensions xsi:type="properties:ViewExtensionDescription">
    <categories>
      <pages name="ProcessPage" labelExpression="PROVE Process" domainClass="PROVE::Process" groups="//@extensions.0/@categories.0/@groups.0"/>
      <pages name="TemplateForPage" labelExpression="PROVE Process" domainClass="PROVE::" groups="//@extensions.0/@categories.0/@groups.0">
        <extends href="platform:/plugin/org.eclipse.sirius.properties.defaultrules/model/properties.odesign#//@extensions.0/@categories.0/@pages.0"/>
      </pages>
      <pages name="ArtifactInStateInstancePage" labelExpression="Artifact in state" domainClass="PROVE::ArtifactStateInstance" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.1"/>
      <groups name="ProcessGroup" labelExpression="Process information" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql: 'Process name: '" valueExpression="aql: self.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
              <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql: newValue"/>
            </firstModelOperations>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="processStatus" labelExpression="Process status:" valueExpression="aql: self.">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="notes" labelExpression="Process notes" valueExpression="aql: self.notes">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
              <subModelOperations xsi:type="tool_1:SetValue" featureName="notes" valueExpression="aql: newValue"/>
            </firstModelOperations>
          </initialOperation>
        </controls>
      </groups>
      <groups name="ArtifactInState" labelExpression="Artifact in state instance" domainClass="PROVE::ArtifactStateInstance" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:SelectDescription" name="artifactSelection" labelExpression="Artifact name:" isEnabledExpression="aql: true" valueExpression="aql: self.eContainer(PROVE::Artifact)" candidatesExpression="aql: self.eContainer(PROVE::Process).eContents(PROVE::Artifact)" candidateDisplayExpression="aql: candidate.name.toString()">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
              <subModelOperations xsi:type="tool_1:Let" variableName="newArtifact" valueExpression="aql: newValue">
                <subModelOperations xsi:type="tool_1:Let" variableName="stateDefinition" valueExpression="aql: self.eContainer(PROVE::ArtifactState).name"/>
                <subModelOperations xsi:type="tool_1:Let" variableName="stateOfNewArtifact" valueExpression="aql: newArtifact.eContents(PROVE::ArtifactState)->select(state | state.name == stateDefinition)->last()"/>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql: stateOfNewArtifact->isEmpty()">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql: newArtifact">
                    <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="State mismatch with designated artifact">
                      <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                        <initialOperation/>
                      </buttons>
                      <buttons labelExpression="OK (Create new state)" default="true" closeDialogOnClick="true">
                        <initialOperation>
                          <firstModelOperations xsi:type="tool_1:CreateInstance" typeName="PROVE::ArtifactState" referenceName="state" variableName="newState">
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="artifactName" valueExpression="aql: newArtifact.name"/>
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql: stateDefinition"/>
                            <subModelOperations xsi:type="tool_1:Let" variableName="stateOfNewArtifact" valueExpression="aql: newState"/>
                          </firstModelOperations>
                        </initialOperation>
                      </buttons>
                      <buttons labelExpression="Change state definition" closeDialogOnClick="true">
                        <initialOperation>
                          <firstModelOperations xsi:type="tool_1:Let" variableName="stateOfNewArtifact" valueExpression="aql: selectedState"/>
                        </initialOperation>
                      </buttons>
                      <page name="Default Page" labelExpression="Create new state for designated artifact?" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.1/@controls.0/@initialOperation/@firstModelOperations/@subModelOperations.0/@subModelOperations.2/@subModelOperations.0/@subModelOperations.0/@groups.0"/>
                      <groups name="AvailableStates" labelExpression="Available states">
                        <controls xsi:type="properties:SelectDescription" name="availableStatesDestinationArtifact" valueExpression="aql: selectedState" candidatesExpression="aql: self.eContents(PROVE::ArtifactState)" candidateDisplayExpression="aql: candidate.name.toString()">
                          <initialOperation>
                            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
                              <subModelOperations xsi:type="tool_1:Let" variableName="selectedState" valueExpression="aql: newValue"/>
                            </firstModelOperations>
                          </initialOperation>
                        </controls>
                      </groups>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql: stateOfNewArtifact" featureName="artifactstateinstance"/>
              </subModelOperations>
            </firstModelOperations>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:ContainerDescription" name="stateContainer">
          <controls xsi:type="properties:SelectDescription" name="artifactState" labelExpression="Artifact state:" valueExpression="aql: self.eContainer(PROVE::ArtifactState)" candidatesExpression="aql: self.eContainer(PROVE::Artifact).eContents(PROVE::ArtifactState)" candidateDisplayExpression="aql: candidate.name">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql: self">
                <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql: newValue" featureName="artifactstateinstance"/>
              </firstModelOperations>
            </initialOperation>
          </controls>
          <controls xsi:type="properties:ButtonDescription" name="createNewStateForArtifactBttn" labelExpression="Create a new state">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="aql: 'Create a new state for artifact ' + self.eContainer(PROVE::Artifact).name">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation>
                      <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql: self.eContainer(PROVE::Artifact)">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PROVE::ArtifactState" referenceName="state" variableName="state">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:  newStateName"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="artifactName" valueExpression="aql: self.eContainer(PROVE::Artifact).name"/>
                        </subModelOperations>
                      </firstModelOperations>
                    </initialOperation>
                  </buttons>
                  <page name="newStatePage" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.1/@controls.1/@controls.1/@initialOperation/@firstModelOperations/@subModelOperations.0/@groups.0"/>
                  <groups name="newStateGroup" labelExpression="New state creation" semanticCandidateExpression="var:self">
                    <controls xsi:type="properties:TextDescription" name="newStateNameText" labelExpression="Enter the desired label for the new state:" valueExpression="aql: let newStateName=null + newStateName">
                      <initialOperation>
                        <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
                          <subModelOperations xsi:type="tool_1:Let" variableName="newStateName" valueExpression="aql: newValue"/>
                        </firstModelOperations>
                      </initialOperation>
                    </controls>
                  </groups>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </controls>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="achievedStatus" labelExpression="Status achieved" valueExpression="aql: self.eContainer(PROVE::ArtifactState).achievedStatus">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql: self.eContainer(PROVE::ArtifactState)">
              <subModelOperations xsi:type="tool_1:SetValue" featureName="achievedStatus" valueExpression="aql: newValue"/>
            </firstModelOperations>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:ContainerDescription" name="flowInstance">
          <controls xsi:type="properties:TextDescription" name="flowSource" labelExpression="Artifact in state flow source:" isEnabledExpression="aql: false" valueExpression="aql: self.originatingActivity.name">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self"/>
            </initialOperation>
          </controls>
          <controls xsi:type="properties:TextDescription" name="flowDestination" labelExpression="Artifact in state flow destination:" isEnabledExpression="aql: false" valueExpression="aql: self.usedByActivity.name">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self"/>
            </initialOperation>
          </controls>
          <layout xsi:type="properties:FillLayoutDescription" orientation="HORIZONTAL"/>
        </controls>
      </groups>
    </categories>
  </extensions>
</description:Group>
